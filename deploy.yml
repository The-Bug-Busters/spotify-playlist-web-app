# Ansible AWS Deployment with using Docker
---
- name: AWS EC2 Deployment
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    # Set Python Intepreter
    - set_fact:
        ansible_python_interpreter: /usr/bin/python3
    # AWS Setup
    - name: Setting up the Security Group for new instance
      amazon.aws.ec2_group:
          name: Ansible_Security_Group_AWS
          description: Allowing Traffic on port 22 and 80
          region: eu-central-1
          rules:
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0

           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0

           - proto: icmp
             from_port: -1
             to_port: -1
             cidr_ip: 0.0.0.0/0
          rules_egress:
           - proto: all
             cidr_ip: 0.0.0.0/0
          vpc_id: vpc-8d1f84e7

    - name: Create Instance
      amazon.aws.ec2:
        instance_type: t2.micro
        instance_tags:
          Name: AWS-Ansible
        image: ami-05f7491af5eef733a
        region: eu-central-1
        group: Ansible_Security_Group_AWS
        count: 1
        key_name: aws_instance_Ansible
        vpc_subnet_id: subnet-656de129
        wait: yes
        monitoring: yes
        assign_public_ip: yes
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
        ansible_instance_id: "{{ item.id }}"
        ansible_region: "{{ item.region }}"
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 30
        timeout: 180
        state: started
      with_items: "{{ ec2.instances }}"

    - name: Setup SSH Key File
      copy:
        dest: ./ssh-key.pem
        content: "{{ lookup('env', 'SSH_PRIVATE_KEY') }}"
    # Just for security purposes - recommended by AWS
    - name: Change permissions of private key
      ansible.builtin.file:
        path: ./ssh-key.pem
        mode: '0400'
# Launch App
- name: Launch Application on EC2 Instance
  hosts: launched
  become: yes
  remote_user: ubuntu
  connection: ssh
  vars:
    ansible_ssh_private_key_file: ./ssh-key.pem
    cloudflare_api_key:           "{{ lookup('env', 'CLOUDFLARE_API_KEY') }}"
    cloudflare_api_token:         "{{ lookup('env', 'CLOUDFLARE_API_TOKEN') }}"
    # cloudflare_ca_server:         "{{ lookup('env', 'CLOUDFLARE_CA_SERVER') }}"
    cloudflare_email:             "{{ lookup('env', 'CLOUDFLARE_EMAIL') }}"
    docker_compose_file:          ./docker-compose.yml
    docker_compose_version:       "v2.0.1"
    docker_username:              "{{ lookup('env', 'DOCKER_USERNAME') }}"
    docker_token:                 "{{ lookup('env', 'DOCKER_TOKEN') }}"
    domain:                       "{{ lookup('env', 'DOMAIN')}}"
    image_name:                   "{{ lookup('env', 'IMAGE_NAME')}}"
    traefik_api_url:              "traefik.yaman.pro"
    traefik_dir:                  "/var/www/traefik"
    spotify_client_id:            "{{ lookup('env', 'SPOTIFY_CLIENT_ID')}}"
    spotify_client_secret:        "{{ lookup('env', 'SPOTIFY_CLIENT_SECRET')}}"
  gather_facts: false
  tasks:
    - name: Show IP address
      debug:
        msg: "{{ ansible_host }}"

    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Upgrade all apt packages
      apt: upgrade=dist

    - name: Install dependencies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gnupg-agent

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: Install pip3
      apt:
        name: python3-pip
        state: present

    - name: Install Docker Module from PyPI with pip3
      pip:
        name: docker
        executable: pip3

    - name: Add {{ ansible_user }} to docker group
      user:
        name: "{{ ansible_user }}"
        group: docker
      register: add_user_docker_group

    - name: Download docker-compose {{ docker_compose_version }}
      get_url:
        url : https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-linux-x86_64
        dest: ~/docker-compose
        mode: '+x'

    - name: Check docker-compose exists
      stat: path=~/docker-compose
      register: docker_compose

    - name: Move docker-compose to /usr/local/bin/docker-compose
      command: mv ~/docker-compose /usr/local/bin/docker-compose
      when: docker_compose.stat.exists

    - name: Install docker-compose from PyPI with pip3
      pip:
        name: docker-compose
        executable: pip3

    - name: Copy docker-compose.yml
      copy:
        src: ./docker-compose.yml
        dest: ~/docker-compose.yml

    - name: Start docker service
      service:
        name: "docker"
        state: started

    - name: Login to ghcr.io (GitHub Package Registry)
      community.docker.docker_login:
        registry_url: ghcr.io
        username: "{{ docker_username }}"
        password: "{{ docker_token }}"
      register: login_results
    - debug:
        var: login_results

    - name: Start Traefik
      docker_container:
        name: reverse-proxy
        # Repository name must be lowercase for using GitHub Package Registry (ghcr)
        image: traefik
        # restart: unless-stopped
        command:
          - --providers.docker
          - --entrypoints.http.address=:80
          - --entrypoints.https.address=:443
          - --providers.docker.exposedByDefault=false
          # - --certificatesresolvers.cloudflare.acme.caServer="{{ cloudflare_ca_server }}"
          # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
          - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
          - --entrypoints.https.http.tls.certresolver=dns-cloudflare
          - --entrypoints.https.http.tls.domains[0].main={{ domain }}
          - --entrypoints.https.http.tls.domains[0].sans=*.{{ domain }}
          - --certificatesresolvers.cloudflare.acme.email={{ cloudflare_email }}
          - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
          - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
          - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
          - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/etc/cert:/etc/cert:ro"
          # - "certstore:/etc/certstore"
        labels:
          traefik.enable: true
          # HTTP-to-HTTPS Redirect
          traefik.http.routers.http-catchall.entrypoints: http
          # traefik.http.routers.http-catchall.rule: HostRegexp(`{host:.+}`)
          traefik.http.routers.http-catchall.middlewares: redirect-to-https
          traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
          # HTTP Routers
          traefik.http.routers.traefik-rtr.entrypoints: https
          traefik.http.routers.traefik-rtr.rule: HostHeader(`traefik.$DOMAINNAME`)
        env:
          CLOUDFLARE_EMAIL: "{{ cloudflare_email | string }}"
          CLOUDFLARE_API_KEY: "{{ cloudflare_api_key | string }}"
        state: started
      register: docker_info

    - name: Deploy Application as Docker Container
      docker_container:
        name: spotify-playlist-app
        # Repository name must be lowercase for using GitHub Package Registry (ghcr)
        image: ghcr.io/{{ image_name | lower }}:main
        state: started
        ports: "80:80"
        labels:
          traefik.enable: true
          traefik.http.routers.spotify-playlist-app.entrypoints: https
          traefik.http.routers.spotify-playlist-app.tls: true
          traefik.http.routers.spotify-playlist-app.tls.certresolver: dns-cloudflare
          traefik.http.routers.spotify-playlist-app.rule: Host(`dhbw."{{ domain }}"`)
        env:
          SPOTIFY_CLIENT_ID: "{{ spotify_client_id | string }}"
          SPOTIFY_CLIENT_SECRET: "{{ spotify_client_secret | string }}"
      register: docker_info

    - name: Create an A record to point to the EC2 instance
      community.general.cloudflare_dns:
        zone: "{{ domain }}"
        record: dhbw
        type: A
        proxied: yes
        value: "{{ ansible_host }}"
        account_email: "{{ cloudflare_email }}"
        account_api_key: "{{ cloudflare_api_key }}"
        api_token: "{{ cloudflare_api_token }}"
      register: record
