# Ansible AWS Deployment with using Docker
---
- name: AWS EC2 Deployment
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - set_fact:
        ansible_python_interpreter: /usr/bin/python3
    - name: Setting up the Security Group for new instance
      amazon.aws.ec2_group:
          name: Ansible_Security_Group_AWS
          description: Allowing Traffic on port 22 and 80
          region: eu-central-1
          rules:
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0

           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0

           - proto: icmp
             from_port: -1
             to_port: -1
             cidr_ip: 0.0.0.0/0
          rules_egress:
           - proto: all
             cidr_ip: 0.0.0.0/0
          vpc_id: vpc-8d1f84e7
    - name: Create Instance
      amazon.aws.ec2:
        key_name: aws_instance_Ansible
        instance_type: t2.micro
        instance_tags:
          Name: AWS-Ansible
        image: ami-05f7491af5eef733a
        region: eu-central-1
        vpc_subnet_id: subnet-656de129
        wait: yes
        monitoring: yes
        group: Ansible_Security_Group_AWS
        count: 1
        assign_public_ip: yes
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
      register: ec2
    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
        ansible_instance_id: "{{ item.id }}"
        ansible_region: "{{ item.region }}"
      loop: "{{ ec2.instances }}"
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 30
        timeout: 180
        state: started
      with_items: "{{ ec2.instances }}"
    - name: Setup SSH Key File
      copy:
        dest: ./ssh-key.pem
        content: "{{ lookup('env', 'SSH_PRIVATE_KEY') }}"
    - name: Change permissions of private key
      ansible.builtin.file:
        path: ./ssh-key.pem
        mode: '0400'
- name: Launch Application on EC2 Instance
  hosts: launched
  become: true
  remote_user: ubuntu
  connection: ssh
  vars:
    ansible_ssh_private_key_file: ./ssh-key.pem
    docker_compose_file: ./docker-compose.yml
    docker_username: "{{ lookup('env', 'DOCKERHUB_USERNAME') }}"
    docker_token:    "{{ lookup('env', 'DOCKERHUB_TOKEN') }}"
    docker_compose_version: "v2.0.1"
  gather_facts: false
  tasks:
    - name: Connect to the instance
      ignore_errors: yes
      command: echo "Connected $USER using instance-id"
      register: message
    - debug: msg="{{ message.stdout }}"
      ignore_errors: yes

    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Upgrade all apt packages
      apt: upgrade=dist

    - name: Install dependencies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gnupg-agent
    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
    - name: Install Docker
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io
    - name: Install pip3
      apt:
        name: python3-pip
        state: present
    - name: Install Docker Module from PyPI with pip3
      pip:
        name: docker
        executable: pip3
    - name: Add "ubuntu" to docker group
      user:
        name: "ubuntu"
        group: docker
    - name: Download docker-compose {{ docker_compose_version }}
      get_url:
        url : https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-linux-x86_64
        dest: ~/docker-compose
        mode: '+x'
    - name: Check docker-compose exists
      stat: path=~/docker-compose
      register: docker_compose
    - name: Move docker-compose to /usr/local/bin/docker-compose
      command: mv ~/docker-compose /usr/local/bin/docker-compose
      when: docker_compose.stat.exists
    - name: Install docker-compose from PyPI with pip3
      pip:
        name: docker-compose
        executable: pip3
    - name: Start docker service
      service:
        name: "docker"
        state: started
    - name: Login to DockerHub
      community.docker.docker_login:
        username: "{{ docker_username }}"
        password: "{{ docker_token }}"
    - name: Copy docker-compose.yml
      copy:
        src: ./docker-compose.yml
        dest: ~/docker-compose.yml
    - name: Deploy Docker Compose stack
      community.docker.docker_compose:
        project_src: ~
        files:
        - docker-compose.yml




